name: Test CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12", "3.13", "3.14"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
            echo "$env:USERPROFILE\.cargo\bin" >> $GITHUB_PATH
          else
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi
        shell: bash

      - name: Verify uv installation
        run: uv --version

      - name: Make huv executable
        run: chmod +x huv
        if: runner.os != 'Windows'

      - name: Test huv help command
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            python huv --help
          else
            ./huv --help
          fi
        shell: bash

      - name: Run tests
        run: python tests/test_huv.py

      - name: Test huv functionality
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            python huv venv test-env
            python huv venv test-child --parent test-env
          else
            ./huv venv test-env
            ./huv venv test-child --parent test-env
          fi
        shell: bash

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy

      - name: Check code formatting with black
        run: black --check --diff tests/

      - name: Lint with flake8
        run: flake8 tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Type check with mypy
        run: mypy tests/ --ignore-missing-imports
        continue-on-error: true

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Make huv executable
        run: chmod +x huv

      - name: Test complete workflow
        run: |
          # Test standalone environment
          ./huv venv test-standalone
          test -d test-standalone
          test -f test-standalone/pyvenv.cfg

          # Test hierarchical environment
          ./huv venv test-parent
          ./huv venv test-child --parent test-parent
          test -d test-child

          # Verify hierarchy setup
          grep -q "PARENT_VENV_PATH" test-child/bin/activate
          grep -q "parent_venv_path" test-child/bin/activate_this.py

          # Test Python version inheritance
          ./huv venv test-inherit-parent
          output=$(./huv venv test-inherit-child --parent test-inherit-parent 2>&1)
          echo "$output" | grep -q "Using parent's Python version"

          # Test with additional arguments
          ./huv venv test-seed-parent --seed
          ./huv venv test-seed-child --parent test-seed-parent --seed
          test -f test-seed-child/bin/pip

      - name: Test error conditions
        run: |
          # Test invalid parent
          if ./huv venv test-invalid --parent nonexistent 2>/dev/null; then
            echo "Should have failed with invalid parent"
            exit 1
          fi

          # Test existing directory
          mkdir existing-dir
          if ./huv venv existing-dir 2>/dev/null; then
            echo "Should have failed with existing directory"
            exit 1
          fi

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
            huv
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

